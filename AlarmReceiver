/*
アラーム鳴る側（受信）
*/
#include <WiFi.h>
#include <PubSubClient.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <TaskScheduler.h>

#define SW_PIN 17
#define DEBOUNCE_DELAY 50
#define MSG_BUFFER_SIZE 50

//WiFiのセットアップ
const char* ssid = "-------";
const char* password = "--------";
//shiftr.ioの設定
const char* mqtt_server = "--------";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
char msg[MSG_BUFFER_SIZE];
int value = 0;
bool ledState = false;

// アラーム音のメロディ設定
#define LEDC_CHANNEL_0 0 
#define LEDC_TIMER_13_BIT 13
#define LEDC_BASE_FREQ 5000
const int buzPin = 23;
const int NOTE_NONE = NOTE_MAX;
int noteDuration = 1000/8;
int melody[] = {
  NOTE_E,NOTE_C,NOTE_D,NOTE_G,NOTE_NONE,NOTE_G,NOTE_D,NOTE_E,NOTE_C,NOTE_NONE
};
int noteOctaves[] = {4,4,4,3,0,3,4,4,4,0};
int noteDurations[] = {2,2,2,1,4,2,2,2,1,4};

volatile bool shouldStopPlaying = false;

Scheduler runner;

void soundTaskMethod();

Task soundTask(0, TASK_FOREVER, &soundTaskMethod);

// wifi接続設定
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

// MQTTサーバーへの接続を再試行する関数
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "--------";
    if (client.connect(clientId.c_str(), "------------", "----------")) {
      Serial.println("connected");
      client.publish("---------", "-------");
      client.subscribe("--------");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

// MQTTブローカーからメッセージが届いたときに呼び出される
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // ペイロードの最初の文字が '1' ならサウンドタスクを有効化、そうでなければ無効化
  if ((char)payload[0] == '1') {
    soundTask.enable();
  } else {
    soundTask.disable();
  }
}

// アラーム音を鳴らすタスクのメソッド
void soundTaskMethod() {
  for (int thisNote = 0; thisNote < 10; thisNote++) {
    ledcWriteNote(LEDC_CHANNEL_0, (note_t)melody[thisNote], noteOctaves[thisNote]);
    int pauseBetweenNotes = 1000 / noteDurations[thisNote] * 1.30;
    delay(pauseBetweenNotes);
    ledcWriteTone(LEDC_CHANNEL_0, 0);

    // スイッチが押されたらアラームを停止
    if (digitalRead(SW_PIN) == HIGH) {
      ledcWriteTone(LEDC_CHANNEL_0, 0);
      soundTask.disable();
      break;
    }
  }
}

void playToneTask(void * parameter) {
  for (;;) { // 無限ループ
    if (ledState) { // ledStateがtrueの場合、音を再生
      for (int thisNote = 0; thisNote < 10; thisNote++) {
        if (shouldStopPlaying) {
          shouldStopPlaying = false;
          ledcWriteTone(LEDC_CHANNEL_0, 0);
          break;
        }
        ledcWriteNote(LEDC_CHANNEL_0, (note_t)melody[thisNote], noteOctaves[thisNote]);
        int pauseBetweenNotes = 1000 / noteDurations[thisNote] * 1.30;
        delay(pauseBetweenNotes);
        ledcWriteTone(LEDC_CHANNEL_0, 0);
      }
    } else {
      vTaskDelay(100 / portTICK_PERIOD_MS);
    }
  }
}

void setup() {
  ledcSetup(LEDC_CHANNEL_0,LEDC_BASE_FREQ,LEDC_TIMER_13_BIT);
  ledcAttachPin(buzPin,LEDC_CHANNEL_0);
  pinMode(SW_PIN, INPUT);

  runner.init();
  runner.addTask(soundTask);
  soundTask.disable();

  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  static bool prevSwitchState = false;
  bool currentSwitchState = digitalRead(SW_PIN);

  if (currentSwitchState != prevSwitchState) {
    delay(DEBOUNCE_DELAY);
    currentSwitchState = digitalRead(SW_PIN);
  }

  if (currentSwitchState != prevSwitchState) {
    prevSwitchState = currentSwitchState;

    if (currentSwitchState == HIGH) {
      ledState = !ledState;
    }
  }
  runner.execute();
}
